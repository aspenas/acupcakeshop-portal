#!/bin/bash

# Obsidian Vault Enhancement Automation Script
# Created as part of the Athlete Financial Empowerment enhancement package

VAULT_PATH="/Users/patricksmith/obsidian/acupcakeshop"
OBSIDIAN_PATH="/Applications/Obsidian.app"
VAULT_NAME="acupcakeshop"

echo "=== Obsidian Vault Enhancement Automation ==="
echo "Vault: $VAULT_PATH"
echo

# Check if Obsidian is installed
if [ ! -d "$OBSIDIAN_PATH" ]; then
  echo "❌ Obsidian not found at $OBSIDIAN_PATH"
  exit 1
else
  echo "✅ Obsidian installation found"
fi

# Check vault directory exists
if [ ! -d "$VAULT_PATH" ]; then
  echo "❌ Vault directory not found at $VAULT_PATH"
  exit 1
else
  echo "✅ Vault directory found"
fi

# Check for .obsidian directory
if [ ! -d "$VAULT_PATH/.obsidian" ]; then
  echo "❌ .obsidian directory not found"
  exit 1
else
  echo "✅ .obsidian directory found"
fi

# Verify or create required directories
echo
echo "Checking required directories..."

# Check or create Dashboards directory
if [ ! -d "$VAULT_PATH/Dashboards" ]; then
  echo "  Creating Dashboards directory..."
  mkdir -p "$VAULT_PATH/Dashboards"
else
  echo "  ✅ Dashboards directory exists"
fi

# Check or create Templates directory
if [ ! -d "$VAULT_PATH/Templates" ]; then
  echo "  Creating Templates directory..."
  mkdir -p "$VAULT_PATH/Templates"
else
  echo "  ✅ Templates directory exists"
fi

# Verify or create template subdirectories
for subdir in "client" "analysis" "project"; do
  if [ ! -d "$VAULT_PATH/Templates/$subdir" ]; then
    echo "  Creating Templates/$subdir directory..."
    mkdir -p "$VAULT_PATH/Templates/$subdir"
  else
    echo "  ✅ Templates/$subdir directory exists"
  fi
done

# Update community-plugins.json
echo
echo "Checking plugin configuration..."

# Verify Templater plugin is enabled
PLUGINS_JSON="$VAULT_PATH/.obsidian/community-plugins.json"
if [ -f "$PLUGINS_JSON" ]; then
  if grep -q "templater-obsidian" "$PLUGINS_JSON"; then
    echo "  ✅ Templater plugin enabled in community-plugins.json"
  else
    echo "  ⚠️ Templater plugin not found in community-plugins.json"
    echo "  Updating community-plugins.json..."
    
    # Backup current file
    cp "$PLUGINS_JSON" "${PLUGINS_JSON}.bak"
    
    # Add templater-obsidian if not present
    TEMP_FILE=$(mktemp)
    cat "$PLUGINS_JSON" | sed 's/\]/, "templater-obsidian"\]/' > "$TEMP_FILE"
    mv "$TEMP_FILE" "$PLUGINS_JSON"
    
    echo "  ✅ Templater plugin added to community-plugins.json"
  fi
else
  echo "  ❌ community-plugins.json not found"
fi

# Verify Dataview plugin is enabled
if [ -f "$PLUGINS_JSON" ]; then
  if grep -q "dataview" "$PLUGINS_JSON"; then
    echo "  ✅ Dataview plugin enabled in community-plugins.json"
  else
    echo "  ⚠️ Dataview plugin not found in community-plugins.json"
    echo "  Updating community-plugins.json..."
    
    # Backup current file if not already backed up
    if [ ! -f "${PLUGINS_JSON}.bak" ]; then
      cp "$PLUGINS_JSON" "${PLUGINS_JSON}.bak"
    fi
    
    # Add dataview if not present
    TEMP_FILE=$(mktemp)
    cat "$PLUGINS_JSON" | sed 's/\]/, "dataview"\]/' > "$TEMP_FILE"
    mv "$TEMP_FILE" "$PLUGINS_JSON"
    
    echo "  ✅ Dataview plugin added to community-plugins.json"
  fi
fi

# Verify Templater plugin installation
TEMPLATER_DIR="$VAULT_PATH/.obsidian/plugins/templater-obsidian"
if [ ! -d "$TEMPLATER_DIR" ]; then
  echo "  ⚠️ Templater plugin directory not found"
  echo "  ℹ️ Install Templater plugin through Obsidian's Community Plugins interface"
else
  echo "  ✅ Templater plugin directory exists"
  
  # Verify settings directory
  TEMPLATER_DATA_DIR="$TEMPLATER_DIR/data"
  if [ ! -d "$TEMPLATER_DATA_DIR" ]; then
    echo "  Creating Templater data directory..."
    mkdir -p "$TEMPLATER_DATA_DIR"
  else
    echo "  ✅ Templater data directory exists"
  fi
  
  # Create or update settings.json
  SETTINGS_FILE="$TEMPLATER_DATA_DIR/settings.json"
  if [ ! -f "$SETTINGS_FILE" ]; then
    echo "  Creating Templater settings.json..."
    
    cat > "$SETTINGS_FILE" << EOL
{
  "template_folder": "Templates",
  "templates_pairs": [
    ["", ""]
  ],
  "trigger_on_file_creation": true,
  "enable_system_commands": false,
  "shell_path": "",
  "user_scripts_folder": "",
  "enable_folder_templates": true,
  "folder_templates": [
    {
      "folder": "Athlete Financial Empowerment/02-interviews/players",
      "template": "Templates/client/player-interview.md"
    },
    {
      "folder": "Athlete Financial Empowerment/02-interviews/industry-professionals",
      "template": "Templates/client/industry-interview.md"
    },
    {
      "folder": "Athlete Financial Empowerment/01-market-research/competitor-profiles",
      "template": "Templates/analysis/competitor-profile.md"
    }
  ],
  "syntax_highlighting": true,
  "enabled_templates_hotkeys": [
    "Templates/client/meeting-notes.md",
    "Templates/client/client-analysis.md",
    "Templates/project/weekly-status.md"
  ],
  "startup_templates": [
    ""
  ]
}
EOL
    echo "  ✅ Templater settings.json created"
  else
    echo "  ✅ Templater settings.json exists"
  fi
fi

# Verify dashboard files
echo
echo "Checking dashboard files..."

# List of dashboard files to verify
DASHBOARDS=(
  "competitor-analysis.md"
  "interview-insights.md"
  "project-status.md"
  "content-status.md"
)

for dashboard in "${DASHBOARDS[@]}"; do
  if [ -f "$VAULT_PATH/Dashboards/$dashboard" ]; then
    CONTENT=$(cat "$VAULT_PATH/Dashboards/$dashboard")
    if [[ "$CONTENT" == *"dataview"* ]]; then
      echo "  ✅ Dashboard $dashboard exists with Dataview queries"
    else
      echo "  ⚠️ Dashboard $dashboard exists but may not have Dataview queries"
    fi
  else
    echo "  ❌ Dashboard $dashboard not found"
  fi
done

# Verify tagging system
echo
echo "Checking tagging system..."

if [ -f "$VAULT_PATH/tag-system.md" ]; then
  echo "  ✅ Tagging system file exists"
else
  echo "  ❌ Tagging system file not found"
fi

# Check for implementation guides
echo
echo "Checking implementation guides..."

GUIDES=(
  "dataview_implementation_guide.md"
  "template_implementation_guide.md"
  "tagging_implementation_guide.md"
  "mermaid_implementation_guide.md"
  "implementation_roadmap.md"
  "obsidian_deployment_package.md"
)

for guide in "${GUIDES[@]}"; do
  if [ -f "$VAULT_PATH/$guide" ]; then
    echo "  ✅ Guide $guide exists"
  else
    echo "  ❌ Guide $guide not found"
  fi
done

# Launch Obsidian
echo
echo "Launching Obsidian with the enhanced vault..."

# Use Obsidian URI to open the vault
open "obsidian://open?vault=$VAULT_NAME"

echo
echo "=== Automation complete ==="
echo "Next steps:"
echo "1. Review the implementation guides"
echo "2. Start with implementation_roadmap.md for a step-by-step approach"
echo "3. Begin applying the tagging system to existing content"
echo "4. Use the templates for new content creation"
echo
echo "If you need to adjust any settings, refer to the relevant implementation guide."