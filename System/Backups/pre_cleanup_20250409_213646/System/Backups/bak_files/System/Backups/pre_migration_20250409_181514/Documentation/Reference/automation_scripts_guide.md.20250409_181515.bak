---
title: "Automation Scripts Guide"
date_created: 2025-04-08
date_modified: 2025-04-08
tags: [documentation, guide, automation, scripts, maintenance]
---

# Automation Scripts Guide

This guide documents the automation scripts available for maintaining and standardizing the Athlete Financial Empowerment Obsidian vault. These scripts help ensure consistency, track issues, and streamline maintenance tasks.

## Available Scripts

### YAML Frontmatter Standardization

**Script Files:**
- `yaml_standardization.sh` - Audit YAML frontmatter across the vault
- `standardize_yaml.sh` - Standardize YAML frontmatter for a single file
- `batch_standardize_yaml.sh` - Standardize YAML frontmatter for multiple files matching a pattern

**Purpose:**
These scripts ensure consistent metadata across all vault files, making search, filtering, and organization more effective.

**Usage:**
```bash
# Audit all YAML frontmatter in the vault
./yaml_standardization.sh

# Standardize a single file
./standardize_yaml.sh /path/to/file.md

# Standardize multiple files matching a pattern
./batch_standardize_yaml.sh "directory/pattern"
```

### Tag Auditing

**Script File:**
- `tag_audit.sh` - Audit tags across the vault and provide standardization recommendations

**Purpose:**
This script analyzes tag usage patterns, identifies inconsistencies, and provides recommendations for standardization.

**Usage:**
```bash
# Run a comprehensive tag audit
./tag_audit.sh
```

### Plugin Installation

**Script File:**
- `install_recommended_plugins.sh` - Install recommended Obsidian plugins

**Purpose:**
This script ensures that all recommended plugins are installed and available for use in the vault.

**Usage:**
```bash
# Install all recommended plugins
./install_recommended_plugins.sh
```

## Maintenance Workflow

For regular vault maintenance, follow this workflow:

1. **YAML Frontmatter Audit**
   - Run `yaml_standardization.sh` monthly
   - Review the generated `yaml_audit_results.md` file
   - Standardize files with issues using `batch_standardize_yaml.sh` or `standardize_yaml.sh`

2. **Tag Audit**
   - Run `tag_audit.sh` monthly
   - Review the generated `tag_audit_results.md` file
   - Update tags according to the recommendations

3. **Plugin Verification**
   - Run `install_recommended_plugins.sh` after Obsidian updates
   - Verify that all plugins are functioning correctly

## Script Details

### YAML Standardization Scripts

#### `yaml_standardization.sh`

This script checks all markdown files in the vault for YAML frontmatter compliance and generates a detailed report.

**Checks include:**
- Missing frontmatter
- Missing required fields (title, date_created, date_modified, tags)
- Non-standard field names (e.g., "created" instead of "date_created")
- Non-standard date formats (should be YYYY-MM-DD)

**Output:**
- Generates `yaml_audit_results.md` with detailed findings
- Provides summary statistics on compliance

#### `standardize_yaml.sh`

This script standardizes YAML frontmatter for a single file, preserving existing content.

**Features:**
- Detects file type from path to apply appropriate template
- Preserves existing metadata values where possible
- Updates field names to standard format
- Ensures proper date formatting
- Backs up original file before making changes

#### `batch_standardize_yaml.sh`

This script applies standardization to multiple files matching a pattern.

**Features:**
- Processes all files in a directory or matching a pattern
- Uses `standardize_yaml.sh` for individual file processing
- Provides progress tracking and summary information

### Tag Audit Script

#### `tag_audit.sh`

This script analyzes tag usage across the vault and provides standardization recommendations.

**Features:**
- Counts tag usage frequency
- Identifies inconsistent tag formats
- Categorizes tags by type (content, status, category)
- Provides specific recommendations for standardization
- Generates `tag_audit_results.md` with detailed findings

### Plugin Installation Script

#### `install_recommended_plugins.sh`

This script installs recommended Obsidian plugins for the vault.

**Features:**
- Checks for existing plugins
- Installs missing plugins
- Updates existing plugins
- Handles dependencies and requirements

## Script Customization

The scripts can be customized for specific needs:

1. **Changing Path Variables**
   - Edit the `VAULT_PATH` variable in each script if the vault location changes

2. **Modifying Standards**
   - Edit the field checking logic in `yaml_standardization.sh` to adjust requirements
   - Update the tag categories in `tag_audit.sh` to match project-specific categories

3. **Adding New Templates**
   - Update the file type detection in `standardize_yaml.sh` to recognize new file types
   - Add new template structures for specialized document types

## Troubleshooting

### Common Issues

**YAML Standardization Issues:**
- **Error**: "No frontmatter found"
  - **Solution**: The file lacks YAML frontmatter. Add basic frontmatter before standardizing.

- **Error**: "Expected replacements don't match actual"
  - **Solution**: The script found multiple instances to replace. Edit the file manually.

**Tag Audit Issues:**
- **Error**: "Inconsistent tag format"
  - **Solution**: Tags contain spaces. Replace spaces with hyphens in the affected files.

**Permission Issues:**
- **Error**: "Permission denied"
  - **Solution**: Make the script executable with `chmod +x script_name.sh`.

## Best Practices

1. **Run audits regularly** - Monthly audits help maintain consistency
2. **Review results carefully** - Understand the changes before applying them
3. **Backup before bulk changes** - Always have backups before running batch standardization
4. **Document customizations** - If you modify scripts, document changes for future reference
5. **Update templates as needed** - Keep templates current with project requirements

---

*Last updated: April 8, 2025*