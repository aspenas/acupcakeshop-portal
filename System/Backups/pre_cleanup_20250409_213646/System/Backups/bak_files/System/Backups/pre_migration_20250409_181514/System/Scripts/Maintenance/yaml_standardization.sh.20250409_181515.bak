#!/bin/bash

# YAML Frontmatter Standardization Script
# This script checks markdown files for YAML frontmatter compliance and reports issues

VAULT_PATH="/Users/patricksmith/obsidian/acupcakeshop"
OUTPUT_FILE="/Users/patricksmith/obsidian/acupcakeshop/yaml_audit_results.md"

# Initialize output file
echo "# YAML Frontmatter Audit Results" > "$OUTPUT_FILE"
echo "Date: $(date +%Y-%m-%d)" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
echo "## Summary" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Initialize counters
total_files=0
files_with_frontmatter=0
files_missing_frontmatter=0
files_with_issues=0
files_with_date_issues=0
files_with_missing_fields=0
files_with_naming_issues=0

# Function to check YAML frontmatter in markdown files
check_frontmatter() {
  echo "Checking YAML frontmatter in markdown files..."
  echo
  
  # Add detailed section to output file
  echo "## Detailed Results" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  
  # Find all markdown files
  find "$VAULT_PATH" -name "*.md" | while read -r file; do
    # Increment total files counter
    ((total_files++))
    
    # Get relative path for cleaner output
    rel_path=${file#"$VAULT_PATH/"}
    
    # Extract YAML frontmatter
    frontmatter=$(sed -n '/^---$/,/^---$/p' "$file")
    
    # Skip files without frontmatter
    if [ -z "$frontmatter" ]; then
      echo "⚠️  No frontmatter found in: $rel_path"
      echo "- ⚠️ **No frontmatter**: \`$rel_path\`" >> "$OUTPUT_FILE"
      ((files_missing_frontmatter++))
      continue
    fi
    
    ((files_with_frontmatter++))
    file_has_issues=0
    
    # Check for required fields
    missing_fields=""
    
    # Check title
    if ! echo "$frontmatter" | grep -q "title:"; then
      missing_fields="$missing_fields title,"
      file_has_issues=1
    fi
    
    # Check date_created or created
    if ! echo "$frontmatter" | grep -q "date_created:" && ! echo "$frontmatter" | grep -q "created:"; then
      missing_fields="$missing_fields date_created,"
      file_has_issues=1
    fi
    
    # Check modified date
    if ! echo "$frontmatter" | grep -q "date_modified:" && ! echo "$frontmatter" | grep -q "modified:"; then
      missing_fields="$missing_fields date_modified,"
      file_has_issues=1
    fi
    
    # Check tags
    if ! echo "$frontmatter" | grep -q "tags:"; then
      missing_fields="$missing_fields tags,"
      file_has_issues=1
    fi
    
    # Report missing fields
    if [ -n "$missing_fields" ]; then
      # Remove trailing comma
      missing_fields=${missing_fields%,}
      echo "❌ Missing fields in: $rel_path"
      echo "   Missing: $missing_fields"
      echo "- ❌ **Missing fields** (\`$missing_fields\`): \`$rel_path\`" >> "$OUTPUT_FILE"
      ((files_with_missing_fields++))
    fi
    
    # Check for field naming inconsistencies
    naming_issues=""
    
    if echo "$frontmatter" | grep -q "created:" && ! echo "$frontmatter" | grep -q "date_created:"; then
      naming_issues="$naming_issues 'created' (use 'date_created'),"
      file_has_issues=1
    fi
    
    if echo "$frontmatter" | grep -q "modified:" && ! echo "$frontmatter" | grep -q "date_modified:"; then
      naming_issues="$naming_issues 'modified' (use 'date_modified'),"
      file_has_issues=1
    fi
    
    # Report naming issues
    if [ -n "$naming_issues" ]; then
      # Remove trailing comma
      naming_issues=${naming_issues%,}
      echo "⚠️  Non-standard field names in: $rel_path"
      echo "    Issues: $naming_issues"
      echo "- ⚠️ **Non-standard field names** ($naming_issues): \`$rel_path\`" >> "$OUTPUT_FILE"
      ((files_with_naming_issues++))
    fi
    
    # Check date format
    date_fields=$(echo "$frontmatter" | grep -E "(date_created|date_modified|created|modified|date|due_date):")
    date_issues=0
    
    if echo "$date_fields" | grep -qv -E "[0-9]{4}-[0-9]{2}-[0-9]{2}"; then
      echo "⚠️  Non-standard date format in: $rel_path (use YYYY-MM-DD)"
      echo "- ⚠️ **Non-standard date format**: \`$rel_path\`" >> "$OUTPUT_FILE"
      ((files_with_date_issues++))
      file_has_issues=1
    fi
    
    if [ "$file_has_issues" -eq 1 ]; then
      ((files_with_issues++))
    fi
  done
  
  # Update summary in output file
  echo "- **Total files scanned**: $total_files" >> "$OUTPUT_FILE"
  echo "- **Files with frontmatter**: $files_with_frontmatter" >> "$OUTPUT_FILE"
  echo "- **Files missing frontmatter**: $files_missing_frontmatter" >> "$OUTPUT_FILE"
  echo "- **Files with issues**: $files_with_issues" >> "$OUTPUT_FILE"
  echo "  - **Missing required fields**: $files_with_missing_fields" >> "$OUTPUT_FILE"
  echo "  - **Non-standard field names**: $files_with_naming_issues" >> "$OUTPUT_FILE"
  echo "  - **Non-standard date formats**: $files_with_date_issues" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  
  # Print summary to console
  echo
  echo "Summary:"
  echo "Total files scanned: $total_files"
  echo "Files with frontmatter: $files_with_frontmatter"
  echo "Files missing frontmatter: $files_missing_frontmatter"
  echo "Files with issues: $files_with_issues"
  echo "  - Missing required fields: $files_with_missing_fields"
  echo "  - Non-standard field names: $files_with_naming_issues"
  echo "  - Non-standard date formats: $files_with_date_issues"
  echo
  echo "Full results have been saved to: $OUTPUT_FILE"
}

# Run the checks
check_frontmatter