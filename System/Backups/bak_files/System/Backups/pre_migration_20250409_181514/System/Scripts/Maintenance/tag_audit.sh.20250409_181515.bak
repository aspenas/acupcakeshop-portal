#!/bin/bash

# Tag Audit Script
# This script audits tags across the Obsidian vault and reports on usage patterns

VAULT_PATH="/Users/patricksmith/obsidian/acupcakeshop"
OUTPUT_FILE="/Users/patricksmith/obsidian/acupcakeshop/tag_audit_results.md"

# Initialize output file
echo "# Tag Audit Results" > "$OUTPUT_FILE"
echo "Date: $(date +%Y-%m-%d)" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
echo "## Summary" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Initialize counters
total_files=0
files_with_tags=0
total_tags=0
unique_tags=0
files_with_inconsistent_tags=0

# Initialize arrays for tag counting
declare -a all_tags
declare -A tag_count

# Function to check tags in markdown files
check_tags() {
  echo "Checking tags in markdown files..."
  echo
  
  # Add detailed section to output file
  echo "## Tag Usage" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  
  # Find all markdown files
  find "$VAULT_PATH" -name "*.md" | while read -r file; do
    # Increment total files counter
    ((total_files++))
    
    # Get relative path for cleaner output
    rel_path=${file#"$VAULT_PATH/"}
    
    # Extract YAML frontmatter
    frontmatter=$(sed -n '/^---$/,/^---$/p' "$file")
    
    # Skip files without frontmatter
    if [ -z "$frontmatter" ]; then
      continue
    fi
    
    # Extract tags from frontmatter
    tags_line=$(echo "$frontmatter" | grep -E "^tags:" | sed 's/^tags: *//')
    
    # Check if tags exist
    if [ -z "$tags_line" ]; then
      # Try multiline tag format
      tags=$(echo "$frontmatter" | sed -n '/^tags:/,/^[a-z]/p' | grep "^- " | sed 's/^- //' | tr '\n' ' ')
      if [ -z "$tags" ]; then
        continue
      fi
    else
      # Convert YAML array format to space-separated list
      tags=$(echo "$tags_line" | sed 's/^\[//' | sed 's/\]$//' | sed 's/, */ /g')
    fi
    
    # Increment files with tags counter
    ((files_with_tags++))
    
    # Track tags
    for tag in $tags; do
      # Remove quotes if present
      tag=$(echo "$tag" | sed 's/^"//;s/"$//' | sed "s/^'//;s/'$//")
      
      # Add to all tags array
      all_tags+=("$tag")
      
      # Increment tag count
      if [ -n "${tag_count[$tag]}" ]; then
        tag_count[$tag]=$((tag_count[$tag] + 1))
      else
        tag_count[$tag]=1
      fi
    done
    
    # Check for inconsistent tag formats
    if echo "$tags" | grep -q " "; then
      echo "⚠️  Inconsistent tag format in: $rel_path"
      echo "    Tags: $tags"
      echo "- ⚠️ **Inconsistent tag format**: \`$rel_path\`" >> "$OUTPUT_FILE"
      echo "  - Tags: \`$tags\`" >> "$OUTPUT_FILE"
      ((files_with_inconsistent_tags++))
    fi
  done
  
  # Calculate totals
  total_tags=${#all_tags[@]}
  unique_tags=${#tag_count[@]}
  
  # Sort and output tag counts
  echo "## Tag Frequency" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  echo "| Tag | Count | Percentage |" >> "$OUTPUT_FILE"
  echo "|-----|-------|------------|" >> "$OUTPUT_FILE"
  
  for tag in "${!tag_count[@]}"; do
    count=${tag_count[$tag]}
    percentage=$(echo "scale=2; $count * 100 / $files_with_tags" | bc)
    echo "| \`$tag\` | $count | ${percentage}% |" >> "$OUTPUT_FILE"
  done
  
  # Sort by frequency (most common first)
  sort_result=$(sort -t'|' -k3 -nr "$OUTPUT_FILE" -o "$OUTPUT_FILE")
  
  # Update summary in output file
  echo "- **Total files scanned**: $total_files" >> "$OUTPUT_FILE"
  echo "- **Files with tags**: $files_with_tags" >> "$OUTPUT_FILE"
  echo "- **Total tag occurrences**: $total_tags" >> "$OUTPUT_FILE"
  echo "- **Unique tags**: $unique_tags" >> "$OUTPUT_FILE"
  echo "- **Files with inconsistent tag formats**: $files_with_inconsistent_tags" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  
  # Tag Categories Analysis
  echo "## Tag Categories" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  
  # Content type tags
  echo "### Content Type Tags" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  echo "| Tag | Count |" >> "$OUTPUT_FILE"
  echo "|-----|-------|" >> "$OUTPUT_FILE"
  for tag in interview document dashboard map template profile; do
    if [ -n "${tag_count[$tag]}" ]; then
      echo "| \`$tag\` | ${tag_count[$tag]} |" >> "$OUTPUT_FILE"
    fi
  done
  
  # Status tags
  echo "" >> "$OUTPUT_FILE"
  echo "### Status Tags" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  echo "| Tag | Count |" >> "$OUTPUT_FILE"
  echo "|-----|-------|" >> "$OUTPUT_FILE"
  for tag in draft review approved complete in_progress; do
    if [ -n "${tag_count[$tag]}" ]; then
      echo "| \`$tag\` | ${tag_count[$tag]} |" >> "$OUTPUT_FILE"
    fi
  done
  for tag in status:draft status:review status:approved status:complete status:in_progress; do
    if [ -n "${tag_count[$tag]}" ]; then
      echo "| \`$tag\` | ${tag_count[$tag]} |" >> "$OUTPUT_FILE"
    fi
  done
  
  # Category tags
  echo "" >> "$OUTPUT_FILE"
  echo "### Category Tags" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  echo "| Tag | Count |" >> "$OUTPUT_FILE"
  echo "|-----|-------|" >> "$OUTPUT_FILE"
  for tag in athlete financial strategy planning analysis research interview competitor; do
    if [ -n "${tag_count[$tag]}" ]; then
      echo "| \`$tag\` | ${tag_count[$tag]} |" >> "$OUTPUT_FILE"
    fi
  done
  
  # Print recommendations for tag standardization
  echo "## Recommendations" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  echo "Based on the tag audit, consider the following standardization recommendations:" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
  
  # Check for status tag inconsistency
  status_as_tag=0
  status_as_prefix=0
  
  for tag in draft review approved complete in_progress; do
    if [ -n "${tag_count[$tag]}" ]; then
      ((status_as_tag+=${tag_count[$tag]}))
    fi
  done
  
  for tag in status:draft status:review status:approved status:complete status:in_progress; do
    if [ -n "${tag_count[$tag]}" ]; then
      ((status_as_prefix+=${tag_count[$tag]}))
    fi
  done
  
  if [ $status_as_tag -gt 0 ] && [ $status_as_prefix -gt 0 ]; then
    echo "1. **Standardize status tags**: Currently using both formats (\`draft\` and \`status:draft\`). Recommend standardizing to \`status:draft\` format." >> "$OUTPUT_FILE"
  fi
  
  # Check for inconsistent formatting
  if [ $files_with_inconsistent_tags -gt 0 ]; then
    echo "2. **Fix inconsistent tag formats**: $files_with_inconsistent_tags files have tags with spaces instead of hyphens. Recommend using kebab-case (e.g., \`market-research\`) for multi-word tags." >> "$OUTPUT_FILE"
  fi
  
  # Check for minimal tagging
  if [ $files_with_tags -lt $total_files ]; then
    missing_tags=$(($total_files - $files_with_tags))
    echo "3. **Add tags to untagged files**: $missing_tags files are missing tags. Recommend adding appropriate tags for better categorization." >> "$OUTPUT_FILE"
  fi
  
  # Check for category tags
  echo "4. **Ensure consistent category tagging**: Ensure all files include at least one category tag (\`athlete\`, \`financial\`, \`strategy\`, etc.) for proper categorization." >> "$OUTPUT_FILE"
  
  # Check for content type tags
  echo "5. **Ensure content type tagging**: Include a content type tag (\`interview\`, \`document\`, \`dashboard\`, etc.) on all files for better filtering." >> "$OUTPUT_FILE"
  
  # Check for status tags
  echo "6. **Include status indicators**: Add status tags (\`status:draft\`, \`status:complete\`, etc.) to all appropriate content to track progress." >> "$OUTPUT_FILE"
  
  # Print summary to console
  echo
  echo "Summary:"
  echo "Total files scanned: $total_files"
  echo "Files with tags: $files_with_tags"
  echo "Total tag occurrences: $total_tags"
  echo "Unique tags: $unique_tags"
  echo "Files with inconsistent tag formats: $files_with_inconsistent_tags"
  echo
  echo "Full results have been saved to: $OUTPUT_FILE"
}

# Run the checks
check_tags